/*
 * memory map
 *    0x0     0x800000      0x8000000     0x10000000             0xffffffff
 *    |-------|-------------|-------------|----------------------|  
 *    flash    reserved     SDRAM         I/O     
 *
 * SDRAM map
 *    0x8000000     0x8600000           0x8640000            0x87fffff
 *    |-------------|-------------------|--------------------|  
 *    kernel        no cache(for dma)    this application     
 */

ENTRY(__start)

MEMORY
{
	MEM0 : ORIGIN = 0x20000000 , LENGTH = 0x7fffff
	MEM1 : ORIGIN = 0x20800000 , LENGTH = 0x7fffff

	/*MEM2 : ORIGIN = 0x28000000 , LENGTH = 0xffff*/ /*board*/
	MEM2 : ORIGIN = 0x28000000 , LENGTH = 0x1000000  /*modify by chenhd*/
	MEM3 : ORIGIN = 0x8000 , LENGTH = 0x7fff
}
/*
PROVIDE (__heap_start = 0xa000);
PROVIDE (__heap_end = 0xff00);
*/
PROVIDE (__heap_start = 0x20800000);
PROVIDE (__heap_end = 0x20cfffff);

/*modify by chenhd*/
PROVIDE (__fstack =  0x28fffff0);
PROVIDE (__stack =  0x28fffff0); 

/*board*/
/* 
PROVIDE (__fstack =  0x2800fff0);
PROVIDE (__stack =  0x2800fff0); 
*/
/*
PROVIDE (__fstack =  0x7ff0);
PROVIDE (__stack =  0x7ff0); 
*/

REGION_ALIAS("REGION_TEXT",   MEM0);
REGION_ALIAS("REGION_RODATA", MEM2);
REGION_ALIAS("REGION_DATA",   MEM2);
REGION_ALIAS("REGION_BSS",    MEM2);

SECTIONS
{
	.text : {
        _start_text = .;
            *(.text)
            *(.text*)
            *(.text.*)
            /*
             * The instruction space will be in SPM
             * 16KBytes
             */
            __ckcpu_ispm = .;
            *(.spmtext)
            __ckcpu_ispm_end = .;
            . = ALIGN(4) ;
        _end_text = .;
    } > REGION_TEXT
/* add by chenhd */
     .eh_frame_hdr BLOCK (0x4): {
        *(.eh_frame_hdr) 
    } > REGION_TEXT

    .rodata : {
        *(.rodata)
        *(.rodata.*)
        *(.rodata.cst4)
        *(.rodata.cst8)
        *(.rdata)
        *(.rdata*)
        *(.rdata1)
        *(.rdata.*)
    } > REGION_RODATA

/* add by chenhd */
    .eh_frame : {
         KEEP (*(.eh_frame))
    } > REGION_DATA

    .data : {
        _start_data = .;
            *(.shdata)
            *(.sdata)
            *(.sdata.*)
            *(.data)
            *(.gcc_exc);
            *(.gcc_except_table)   
            . = ALIGN(4) ;
            *(.data*)
            *(.data.*)
            /*
             * The Data space will be in SPM
             * 8KBytes
             */
            __ckcpu_dspm = .;
            *(.spmdata)
            __ckcpu_dspm_end = .;
        _end_data = .;
     } > REGION_DATA

     .bss : {
         __sbss = ALIGN(0x4) ;
         __bss_start = . ;
             *(.dynsbss)
             *(.sbss)
             *(.sbss.*)
             *(.scommon)
             *(.dynbss)
             *(.bss)
             *(.bss.*)
             *(COMMON)

             . = ALIGN(0x10) ;
          __ebss = . ;
          __end = . ;
          end = . ;
    } > REGION_BSS
	
	.junk 0 : { *(.rel*) *(.rela*) }
	/* Stabs debugging sections.    */
	.stab 0 : { *(.stab) }
	.stabstr 0 : { *(.stabstr) }
	.stab.excl 0 : { *(.stab.excl) }
	.stab.exclstr 0 : { *(.stab.exclstr) }
	.stab.index 0 : { *(.stab.index) }
	.stab.indexstr 0 : { *(.stab.indexstr) }
	.comment 0 : { *(.comment) }
	.debug_abbrev 0 : { *(.debug_abbrev) }
	.debug_info 0 : { *(.debug_info) }
	.debug_line 0 : { *(.debug_line) }
	.debug_pubnames 0 : { *(.debug_pubnames) }
	.debug_aranges 0 : { *(.debug_aranges) }
}
